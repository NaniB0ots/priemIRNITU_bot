import telebot

from bot_API import core
from bot_API.core import ChatBotActions
from project.settings import TG_TOKEN

from tg_bot.utils import keyboards
from bot_API.utils.PhoneNumberValidator import is_valid_phone_number
from tg_bot import models

if not TG_TOKEN:
    raise ValueError('TG_TOKEN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')


class TelegramBot(telebot.TeleBot, ChatBotActions):
    def infinity_polling(self, *args, **kwargs):
        print('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
        super(TelegramBot, self).infinity_polling(*args, **kwargs)


bot = TelegramBot(TG_TOKEN)
user = models.TelegramUser.objects.none()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    message_to_send = bot.get_start_message()
    bot.send_message(chat_id=chat_id, text=message_to_send, reply_markup=keyboards.get_main_menu_keyboard())


@bot.message_handler(commands=['help'])
def help_message(message):
    chat_id = message.chat.id
    message_to_send = bot.get_help_message()
    bot.send_message(chat_id=chat_id, text=message_to_send)


@bot.message_handler(regexp='^–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é$|^–û—Ç–º–µ–Ω–∞$')
def message(message):
    chat_id = message.chat.id
    if message.text == '–û—Ç–º–µ–Ω–∞':
        message_to_send = '–¢–æ–≥–¥–∞ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòä'
    else:
        message_to_send = message.text
    bot.send_message(chat_id=chat_id, text=message_to_send, reply_markup=keyboards.get_main_menu_keyboard())


@bot.message_handler(regexp='^–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫$')
def message(message):
    chat_id = message.chat.id
    message_to_send = '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å'
    msg = bot.send_message(chat_id=chat_id, text=message_to_send, reply_markup=keyboards.get_cancel_keyboard())
    bot.register_next_step_handler(msg, feedback_processing)


def feedback_processing(message):
    chat_id = message.chat.id

    if message.text == '–û—Ç–º–µ–Ω–∞':
        message_to_send = '–¢–æ–≥–¥–∞ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòä'
        bot.send_message(chat_id=chat_id, text=message_to_send, reply_markup=keyboards.get_main_menu_keyboard())
    else:
        user.last_question = message.text
        message_to_send = '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        msg = bot.send_message(chat_id=chat_id, text=message_to_send, reply_markup=keyboards.get_cancel_keyboard())
        bot.register_next_step_handler(msg, phone_number_processing)



def phone_number_processing(message):
    chat_id = message.chat.id

    if message.text == '–û—Ç–º–µ–Ω–∞':
        message_to_send = '–¢–æ–≥–¥–∞ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòä'
        bot.send_message(chat_id=chat_id, text=message_to_send, reply_markup=keyboards.get_main_menu_keyboard())
    else:
        phone_number = message.text
        print(f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}')
        if is_valid_phone_number(phone_number):
            core.RequestManager.create_request(phone_number=phone_number, question=user.last_question)
            message_to_send = '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–ºüòä'
            bot.send_message(chat_id=chat_id, text=message_to_send, reply_markup=keyboards.get_main_menu_keyboard())

        else:
            message_to_send = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
            msg = bot.send_message(chat_id=chat_id, text=message_to_send, reply_markup=keyboards.get_cancel_keyboard())
            bot.register_next_step_handler(msg, phone_number_processing)


@bot.message_handler(regexp=['^–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã$'])
def message(message):
    chat_id = message.chat.id

    pass


@bot.message_handler(commands=['–ü–æ–∏—Å–∫'])
def message(message):
    chat_id = message.chat.id

    pass